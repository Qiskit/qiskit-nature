# This code is part of Qiskit.
#
# (C) Copyright IBM 2021.
#
# This code is licensed under the Apache License, Version 2.0. You may
# obtain a copy of this license in the LICENSE.txt file in the root directory
# of this source tree or at http://www.apache.org/licenses/LICENSE-2.0.
#
# Any modifications or derivative works of this code must retain this
# copyright notice, and modified files need to carry a notice indicating
# that they have been altered from the originals.
"""The Vibrational Problem class."""
from typing import List, Tuple, Optional

from qiskit_nature import WatsonHamiltonian
from qiskit_nature.drivers import BosonicDriver
from qiskit_nature.operators.second_quantization import SecondQuantizedOp
from qiskit_nature.problems.second_quantization.base_problem import BaseProblem
from qiskit_nature.problems.second_quantization.vibrational.spin_op_builder import build_spin_op
from qiskit_nature.transformers import BaseTransformer


class VibrationalProblem(BaseProblem):
    """Vibrational Problem"""

    def __init__(self, bosonic_driver: BosonicDriver,
                 transformers: Optional[List[BaseTransformer]] = None):
        """

        Args:
            bosonic_driver: A bosonic driver encoding the molecule information.
            transformers: A list of transformations to be applied to the molecule.
        """
        super().__init__(bosonic_driver, transformers)

    def second_q_ops(self) -> List[SecondQuantizedOp]:
        """Returns a list of `SecondQuantizedOp` created based on a driver and transformations
        provided.

        Returns:
            A list of `SecondQuantizedOp` in the following order: ... .
        """
        watson_hamiltonian = self.driver.run()
        watson_hamiltonian_transformed = self._transform(watson_hamiltonian)
        basis_size = 1  # TODO how to get it?
        truncation_order = 3  # TODO how to get it?
        bosonic_op = build_spin_op(watson_hamiltonian_transformed, basis_size, truncation_order)

        second_quantized_ops_list = [SecondQuantizedOp([bosonic_op])]

        return second_quantized_ops_list

    def _transform(self, watson_hamiltonian: WatsonHamiltonian) -> WatsonHamiltonian:
        for transformer in self.transformers:
            watson_hamiltonian = transformer.transform(watson_hamiltonian)
        return watson_hamiltonian


a=[[([[0, 0, 0]], 1215.682529375), ([[0, 1, 1]], 3656.9551768750007),
  ([[1, 0, 0]], 682.5053337500001), ([[1, 0, 1]], -46.77167173323271),
  ([[1, 1, 0]], -46.77167173323271), ([[1, 1, 1]], 2050.1464387500005),
  ([[2, 0, 0]], 329.41209562500006), ([[2, 1, 1]], 992.0224281250003),
  ([[3, 0, 0]], 328.12046812500006), ([[3, 1, 1]], 985.5642906250002)],
 [([[1, 0, 0], [0, 0, 0]], 5.039653750000002), ([[1, 0, 0], [0, 1, 1]], 15.118961250000009),
  ([[1, 0, 1], [0, 0, 0]], -89.0908653064951), ([[1, 0, 1], [0, 1, 1]], -267.27259591948535),
  ([[1, 1, 0], [0, 0, 0]], -89.0908653064951), ([[1, 1, 0], [0, 1, 1]], -267.27259591948535),
  ([[1, 1, 1], [0, 0, 0]], 15.118961250000009), ([[1, 1, 1], [0, 1, 1]], 45.35688375000003),
  ([[2, 0, 0], [0, 0, 0]], -6.3850425000000035), ([[2, 0, 0], [0, 1, 1]], -19.15512750000001),
  ([[2, 0, 0], [1, 0, 0]], -2.5657231250000008), ([[2, 0, 0], [1, 0, 1]], 21.644966371722845),
  ([[2, 0, 0], [1, 1, 0]], 21.644966371722845), ([[2, 0, 0], [1, 1, 1]], -7.697169375000003),
  ([[2, 0, 1], [0, 0, 1]], -2.0085637500000004), ([[2, 0, 1], [0, 1, 0]], -2.0085637500000004),
  ([[2, 1, 0], [0, 0, 1]], -2.0085637500000004), ([[2, 1, 0], [0, 1, 0]], -2.0085637500000004),
  ([[2, 1, 1], [0, 0, 0]], -19.15512750000001), ([[2, 1, 1], [0, 1, 1]], -57.46538250000003),
  ([[2, 1, 1], [1, 0, 0]], -7.697169375000004), ([[2, 1, 1], [1, 0, 1]], 64.93489911516855),
  ([[2, 1, 1], [1, 1, 0]], 64.93489911516855), ([[2, 1, 1], [1, 1, 1]], -23.091508125000015),
  ([[3, 0, 0], [0, 0, 0]], -4.595841875000001), ([[3, 0, 0], [0, 1, 1]], -13.787525625000006),
  ([[3, 0, 0], [1, 0, 0]], -1.683979375000001), ([[3, 0, 0], [1, 0, 1]], 6.412754934114709),
  ([[3, 0, 0], [1, 1, 0]], 6.412754934114709), ([[3, 0, 0], [1, 1, 1]], -5.051938125000003),
  ([[3, 0, 0], [2, 0, 0]], -0.5510218750000002), ([[3, 0, 0], [2, 1, 1]], -1.6530656250000009),
  ([[3, 0, 1], [0, 0, 1]], 3.5921675000000004), ([[3, 0, 1], [0, 1, 0]], 3.5921675000000004),
  ([[3, 0, 1], [2, 0, 1]], 7.946551250000004), ([[3, 0, 1], [2, 1, 0]], 7.946551250000004),
  ([[3, 1, 0], [0, 0, 1]], 3.5921675000000004), ([[3, 1, 0], [0, 1, 0]], 3.5921675000000004),
  ([[3, 1, 0], [2, 0, 1]], 7.946551250000004), ([[3, 1, 0], [2, 1, 0]], 7.946551250000004),
  ([[3, 1, 1], [0, 0, 0]], -13.787525625000006), ([[3, 1, 1], [0, 1, 1]], -41.362576875000016),
  ([[3, 1, 1], [1, 0, 0]], -5.051938125000002), ([[3, 1, 1], [1, 0, 1]], 19.238264802344126),
  ([[3, 1, 1], [1, 1, 0]], 19.238264802344126), ([[3, 1, 1], [1, 1, 1]], -15.15581437500001),
  ([[3, 1, 1], [2, 0, 0]], -1.6530656250000009), ([[3, 1, 1], [2, 1, 1]], -4.959196875000003)],
 [([[2, 0, 1], [1, 0, 0], [0, 0, 1]], -3.7351312500000025),
  ([[2, 0, 1], [1, 0, 0], [0, 1, 0]], -3.7351312500000025),
  ([[2, 0, 1], [1, 0, 1], [0, 0, 1]], 44.01468537435675),
  ([[2, 0, 1], [1, 0, 1], [0, 1, 0]], 44.01468537435675),
  ([[2, 0, 1], [1, 1, 0], [0, 0, 1]], 44.01468537435675),
  ([[2, 0, 1], [1, 1, 0], [0, 1, 0]], 44.01468537435675),
  ([[2, 0, 1], [1, 1, 1], [0, 0, 1]], -11.205393750000008),
  ([[2, 0, 1], [1, 1, 1], [0, 1, 0]], -11.205393750000008),
  ([[2, 1, 0], [1, 0, 0], [0, 0, 1]], -3.7351312500000025),
  ([[2, 1, 0], [1, 0, 0], [0, 1, 0]], -3.7351312500000025),
  ([[2, 1, 0], [1, 0, 1], [0, 0, 1]], 44.01468537435675),
  ([[2, 1, 0], [1, 0, 1], [0, 1, 0]], 44.01468537435675),
  ([[2, 1, 0], [1, 1, 0], [0, 0, 1]], 44.01468537435675),
  ([[2, 1, 0], [1, 1, 0], [0, 1, 0]], 44.01468537435675),
  ([[2, 1, 0], [1, 1, 1], [0, 0, 1]], -11.205393750000008),
  ([[2, 1, 0], [1, 1, 1], [0, 1, 0]], -11.205393750000008),
  ([[3, 0, 0], [2, 0, 1], [0, 0, 1]], 5.333592500000003),
  ([[3, 0, 0], [2, 0, 1], [0, 1, 0]], 5.333592500000003),
  ([[3, 0, 0], [2, 1, 0], [0, 0, 1]], 5.333592500000003),
  ([[3, 0, 0], [2, 1, 0], [0, 1, 0]], 5.333592500000003),
  ([[3, 0, 1], [1, 0, 0], [0, 0, 1]], 6.680006250000005),
  ([[3, 0, 1], [1, 0, 0], [0, 1, 0]], 6.680006250000005),
  ([[3, 0, 1], [1, 0, 1], [0, 0, 1]], -78.71701132125837),
  ([[3, 0, 1], [1, 0, 1], [0, 1, 0]], -78.71701132125837),
  ([[3, 0, 1], [1, 1, 0], [0, 0, 1]], -78.71701132125837),
  ([[3, 0, 1], [1, 1, 0], [0, 1, 0]], -78.71701132125837),
  ([[3, 0, 1], [1, 1, 1], [0, 0, 1]], 20.040018750000016),
  ([[3, 0, 1], [1, 1, 1], [0, 1, 0]], 20.040018750000016),
  ([[3, 0, 1], [2, 0, 0], [0, 0, 1]], -9.538736250000005),
  ([[3, 0, 1], [2, 0, 0], [0, 1, 0]], -9.538736250000005),
  ([[3, 0, 1], [2, 0, 1], [0, 0, 0]], -5.8219712500000025),
  ([[3, 0, 1], [2, 0, 1], [0, 1, 1]], -17.46591375000001),
  ([[3, 0, 1], [2, 0, 1], [1, 0, 0]], -2.8691487500000012),
  ([[3, 0, 1], [2, 0, 1], [1, 0, 1]], 17.15529085952823),
  ([[3, 0, 1], [2, 0, 1], [1, 1, 0]], 17.15529085952823),
  ([[3, 0, 1], [2, 0, 1], [1, 1, 1]], -8.607446250000004),
  ([[3, 0, 1], [2, 1, 0], [0, 0, 0]], -5.8219712500000025),
  ([[3, 0, 1], [2, 1, 0], [0, 1, 1]], -17.46591375000001),
  ([[3, 0, 1], [2, 1, 0], [1, 0, 0]], -2.8691487500000012),
  ([[3, 0, 1], [2, 1, 0], [1, 0, 1]], 17.15529085952823),
  ([[3, 0, 1], [2, 1, 0], [1, 1, 0]], 17.15529085952823),
  ([[3, 0, 1], [2, 1, 0], [1, 1, 1]], -8.607446250000004),
  ([[3, 0, 1], [2, 1, 1], [0, 0, 1]], -28.61620875000002),
  ([[3, 0, 1], [2, 1, 1], [0, 1, 0]], -28.61620875000002),
  ([[3, 1, 0], [1, 0, 0], [0, 0, 1]], 6.680006250000005),
  ([[3, 1, 0], [1, 0, 0], [0, 1, 0]], 6.680006250000005),
  ([[3, 1, 0], [1, 0, 1], [0, 0, 1]], -78.71701132125837),
  ([[3, 1, 0], [1, 0, 1], [0, 1, 0]], -78.71701132125837),
  ([[3, 1, 0], [1, 1, 0], [0, 0, 1]], -78.71701132125837),
  ([[3, 1, 0], [1, 1, 0], [0, 1, 0]], -78.71701132125837),
  ([[3, 1, 0], [1, 1, 1], [0, 0, 1]], 20.040018750000016),
  ([[3, 1, 0], [1, 1, 1], [0, 1, 0]], 20.040018750000016),
  ([[3, 1, 0], [2, 0, 0], [0, 0, 1]], -9.538736250000005),
  ([[3, 1, 0], [2, 0, 0], [0, 1, 0]], -9.538736250000005),
  ([[3, 1, 0], [2, 0, 1], [0, 0, 0]], -5.8219712500000025),
  ([[3, 1, 0], [2, 0, 1], [0, 1, 1]], -17.46591375000001),
  ([[3, 1, 0], [2, 0, 1], [1, 0, 0]], -2.8691487500000012),
  ([[3, 1, 0], [2, 0, 1], [1, 0, 1]], 17.15529085952823),
  ([[3, 1, 0], [2, 0, 1], [1, 1, 0]], 17.15529085952823),
  ([[3, 1, 0], [2, 0, 1], [1, 1, 1]], -8.607446250000004),
  ([[3, 1, 0], [2, 1, 0], [0, 0, 0]], -5.8219712500000025),
  ([[3, 1, 0], [2, 1, 0], [0, 1, 1]], -17.46591375000001),
  ([[3, 1, 0], [2, 1, 0], [1, 0, 0]], -2.8691487500000012),
  ([[3, 1, 0], [2, 1, 0], [1, 0, 1]], 17.15529085952823),
  ([[3, 1, 0], [2, 1, 0], [1, 1, 0]], 17.15529085952823),
  ([[3, 1, 0], [2, 1, 0], [1, 1, 1]], -8.607446250000004),
  ([[3, 1, 0], [2, 1, 1], [0, 0, 1]], -28.61620875000002),
  ([[3, 1, 0], [2, 1, 1], [0, 1, 0]], -28.61620875000002),
  ([[3, 1, 1], [2, 0, 1], [0, 0, 1]], 16.000777500000012),
  ([[3, 1, 1], [2, 0, 1], [0, 1, 0]], 16.000777500000012),
  ([[3, 1, 1], [2, 1, 0], [0, 0, 1]], 16.000777500000012),
  ([[3, 1, 1], [2, 1, 0], [0, 1, 0]], 16.000777500000012)]]
